//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/NightAngelGames/GruntzUnityverse/Scripts/GruntzUnityverse/GameActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @GameActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameActions"",
    ""maps"": [
        {
            ""name"": ""InGame"",
            ""id"": ""964ec7c5-3953-494d-9a5a-37e7339bab0e"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""938e4eb9-b43e-431d-b5b1-17d3dd2e6cf7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AdditionalSelect"",
                    ""type"": ""Button"",
                    ""id"": ""af7c99b8-9b86-45ca-bb01-5dc0774151ba"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectAll"",
                    ""type"": ""Button"",
                    ""id"": ""5ca4c0ee-4de5-4645-8606-56150e570575"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""3bc64928-1cd8-4aa5-ab40-980fb6bfa2fc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""ef9ea3b1-3197-4165-ae0f-9506499649b9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Give"",
                    ""type"": ""Button"",
                    ""id"": ""219e16dc-18c1-4175-8859-dc5d04e44403"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ForceIdle"",
                    ""type"": ""Button"",
                    ""id"": ""01ecc06a-ef1f-433b-8c45-b6c43bb14896"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SaveGame"",
                    ""type"": ""Button"",
                    ""id"": ""1bd05a8e-ef76-41c2-89b3-5a80a4480a63"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LoadGame"",
                    ""type"": ""Button"",
                    ""id"": ""fb69b610-44ff-439e-af18-f6be369e3572"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5e1de9bc-afd6-4c5d-9b44-e1b5f936a919"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left Button [Mouse] + Alt [Keyboard]"",
                    ""id"": ""a0115eee-7405-4226-bebe-b85af6c4e29e"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Give"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""04fffa24-9765-4553-8a4e-3038b178c7d8"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Give"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""37e693c1-0fae-482b-86d3-bfbc3da52c49"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Give"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""444ba4d2-02bf-45aa-b8a5-4ef6a9091427"",
                    ""path"": ""<Keyboard>/f5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SaveGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7cd334ab-6f04-4848-ae34-70a7254bbf51"",
                    ""path"": ""<Keyboard>/f9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left Button [Mouse] + Control [Keyboard]"",
                    ""id"": ""c29d4e00-e32a-4dd9-9a90-90c794346332"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AdditionalSelect"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""272a946a-7df4-401c-af57-9d8d2111eca7"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AdditionalSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""9173cbba-0d7d-474b-b2f9-4a72486906a7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AdditionalSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Control [Keyboard] + A [Keyboard]"",
                    ""id"": ""625a9cc0-5d11-41f0-b5c7-199d1946dbc7"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectAll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""ffe8f7e9-b377-42b4-8e96-c7afdc7a0416"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectAll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""23279bf6-3cc4-440d-8aa3-dd6cbfb57f3d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectAll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left Button [Mouse] + Shift [Keyboard]"",
                    ""id"": ""09266187-8b79-46b0-877e-b5c5a2ab6a0c"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""eda5f10e-b7fb-4405-88da-f83421ab8d6a"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""0d167ad0-5b56-44af-8143-5e01dd9ba700"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f0b392bb-060d-4c95-8ec8-5acacf6cfb81"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b32af88f-7016-4b09-87f6-afc14693bbc4"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForceIdle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameManager"",
            ""id"": ""10bf3e63-b94b-4e21-9472-bb408a3b4a5b"",
            ""actions"": [
                {
                    ""name"": ""SwitchLocale"",
                    ""type"": ""Button"",
                    ""id"": ""6e8c03fc-d679-46b3-a665-9aa960387f1c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeGameSpeed"",
                    ""type"": ""Button"",
                    ""id"": ""e55cb03b-b58a-49c7-9e45-4c55cd95dbab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FreezeGame"",
                    ""type"": ""Button"",
                    ""id"": ""9429b246-2efa-4a8d-8fe4-cf7c400a23ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1eac66c6-6eb0-467a-9d6d-62f6d9b9efc8"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchLocale"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22c57062-2a5e-4897-af1b-973687658e9f"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeGameSpeed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ae2976c-d97f-4317-b747-1eb104d1dcaa"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FreezeGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""StatzMenu"",
            ""id"": ""615e8911-a7b7-4413-8f66-4f142e242266"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""25d1d973-535f-4da8-bec9-f1d323a84d0c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2780e3a1-a6cd-442c-b31e-74694ad5a36a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""e1231cdb-2016-49c1-9e6d-9a49928314f5"",
            ""actions"": [
                {
                    ""name"": ""ZoomIn"",
                    ""type"": ""Button"",
                    ""id"": ""5853ef35-f2ad-47b1-a23a-2e7c8d8ca9e3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ZoomOut"",
                    ""type"": ""Button"",
                    ""id"": ""52d5e21c-7c4c-4beb-9a84-5429321ab134"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""430abcee-791c-4b11-b1ec-c2c0c753b774"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ScrollZoom"",
                    ""type"": ""Value"",
                    ""id"": ""1d478082-7ee0-499a-be74-1567c829d7b2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""0956f398-acee-4b52-8492-568dc5464477"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f4070deb-19d6-4a70-b7fa-1f01c99b3fcd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""07f94040-0acd-4762-a6df-1fb3b8082269"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""07d53f35-aa7d-48d9-807b-09dbe5eca0a3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""141138a9-69ef-4028-ac0c-d5d27999106e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a72b06b9-33db-42c9-b4a9-5529cf953ebc"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23e00528-b9b2-4f6b-99db-2d47914d63b4"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc965c5e-1833-43da-85c9-b2895be3c5ad"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomIn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ContinueInput"",
            ""id"": ""17424613-45ca-492c-bc32-3ed6a99624be"",
            ""actions"": [
                {
                    ""name"": ""ContinueToLevel"",
                    ""type"": ""Button"",
                    ""id"": ""0ea4e8d7-8a49-4304-b875-11c7a8b48d07"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e6a89ebb-fb83-4fd3-963e-bb78214002ec"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ContinueToLevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PauseMenu"",
            ""id"": ""2fb97bb6-a3a2-4c34-923f-6cc87951738e"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""bb2cab97-4b9b-438f-904c-f5ca28ed72ff"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dc9d739d-4d97-4375-8aad-7cf2673668da"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CreatorPad"",
            ""id"": ""64d98f1d-b97e-4550-8f0d-26c670322992"",
            ""actions"": [
                {
                    ""name"": ""TryPlaceGrunt"",
                    ""type"": ""Button"",
                    ""id"": ""0371cfd4-1989-4595-a2b0-47315fd0ba3a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0cf459d4-d3a1-47b6-a305-48ea02bbd36d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TryPlaceGrunt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MainMenu"",
            ""id"": ""1b8c08b7-57c5-4728-804f-e96ac62bf289"",
            ""actions"": [
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""7b2e31ad-c0a5-4d60-b2da-6e65814fcb79"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""dbffc3f1-b4dd-4469-8262-9f75809fd8b1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Navigate"",
                    ""type"": ""Value"",
                    ""id"": ""9989cf7c-9151-4cb7-b916-44530ecddb20"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveMouse"",
                    ""type"": ""Value"",
                    ""id"": ""d192e152-8a8d-45c1-831c-c670ed65bbf1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""45b03ca1-a63b-4263-94bc-95c675fbc638"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc7c6468-f3c4-4fd5-8b70-470a31245ac8"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e140138c-44aa-48ac-be49-6c03c78f1cb8"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""e9a54e30-3bde-457d-96b4-842bcc8d0bab"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""43d1b6d0-becc-4599-885e-a513c3a4cfac"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5212d1d4-fe1e-4c29-aa63-089bb8525f52"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4fd7f618-0b98-4647-b352-095fc5875ffe"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7caa845b-5c75-47bd-a551-2fc274e6f76c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow"",
                    ""id"": ""1f3eb58a-8cd9-4849-9561-5f04a7b52d64"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d55b8ed1-2e5a-4c31-aa95-ebb7a577239c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""67b56b83-cce1-4f14-b0f8-4f494e06db6f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2e5e75b9-d281-4907-a6e3-c1d5b1c27c97"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""79c906bf-1e7e-43a2-a034-8830347136b9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InGame
        m_InGame = asset.FindActionMap("InGame", throwIfNotFound: true);
        m_InGame_Select = m_InGame.FindAction("Select", throwIfNotFound: true);
        m_InGame_AdditionalSelect = m_InGame.FindAction("AdditionalSelect", throwIfNotFound: true);
        m_InGame_SelectAll = m_InGame.FindAction("SelectAll", throwIfNotFound: true);
        m_InGame_Move = m_InGame.FindAction("Move", throwIfNotFound: true);
        m_InGame_Action = m_InGame.FindAction("Action", throwIfNotFound: true);
        m_InGame_Give = m_InGame.FindAction("Give", throwIfNotFound: true);
        m_InGame_ForceIdle = m_InGame.FindAction("ForceIdle", throwIfNotFound: true);
        m_InGame_SaveGame = m_InGame.FindAction("SaveGame", throwIfNotFound: true);
        m_InGame_LoadGame = m_InGame.FindAction("LoadGame", throwIfNotFound: true);
        // GameManager
        m_GameManager = asset.FindActionMap("GameManager", throwIfNotFound: true);
        m_GameManager_SwitchLocale = m_GameManager.FindAction("SwitchLocale", throwIfNotFound: true);
        m_GameManager_ChangeGameSpeed = m_GameManager.FindAction("ChangeGameSpeed", throwIfNotFound: true);
        m_GameManager_FreezeGame = m_GameManager.FindAction("FreezeGame", throwIfNotFound: true);
        // StatzMenu
        m_StatzMenu = asset.FindActionMap("StatzMenu", throwIfNotFound: true);
        m_StatzMenu_Escape = m_StatzMenu.FindAction("Escape", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_ZoomIn = m_Camera.FindAction("ZoomIn", throwIfNotFound: true);
        m_Camera_ZoomOut = m_Camera.FindAction("ZoomOut", throwIfNotFound: true);
        m_Camera_Move = m_Camera.FindAction("Move", throwIfNotFound: true);
        m_Camera_ScrollZoom = m_Camera.FindAction("ScrollZoom", throwIfNotFound: true);
        // ContinueInput
        m_ContinueInput = asset.FindActionMap("ContinueInput", throwIfNotFound: true);
        m_ContinueInput_ContinueToLevel = m_ContinueInput.FindAction("ContinueToLevel", throwIfNotFound: true);
        // PauseMenu
        m_PauseMenu = asset.FindActionMap("PauseMenu", throwIfNotFound: true);
        m_PauseMenu_Escape = m_PauseMenu.FindAction("Escape", throwIfNotFound: true);
        // CreatorPad
        m_CreatorPad = asset.FindActionMap("CreatorPad", throwIfNotFound: true);
        m_CreatorPad_TryPlaceGrunt = m_CreatorPad.FindAction("TryPlaceGrunt", throwIfNotFound: true);
        // MainMenu
        m_MainMenu = asset.FindActionMap("MainMenu", throwIfNotFound: true);
        m_MainMenu_Cancel = m_MainMenu.FindAction("Cancel", throwIfNotFound: true);
        m_MainMenu_Submit = m_MainMenu.FindAction("Submit", throwIfNotFound: true);
        m_MainMenu_Navigate = m_MainMenu.FindAction("Navigate", throwIfNotFound: true);
        m_MainMenu_MoveMouse = m_MainMenu.FindAction("MoveMouse", throwIfNotFound: true);
    }

    ~@GameActions()
    {
        Debug.Assert(!m_InGame.enabled, "This will cause a leak and performance issues, GameActions.InGame.Disable() has not been called.");
        Debug.Assert(!m_GameManager.enabled, "This will cause a leak and performance issues, GameActions.GameManager.Disable() has not been called.");
        Debug.Assert(!m_StatzMenu.enabled, "This will cause a leak and performance issues, GameActions.StatzMenu.Disable() has not been called.");
        Debug.Assert(!m_Camera.enabled, "This will cause a leak and performance issues, GameActions.Camera.Disable() has not been called.");
        Debug.Assert(!m_ContinueInput.enabled, "This will cause a leak and performance issues, GameActions.ContinueInput.Disable() has not been called.");
        Debug.Assert(!m_PauseMenu.enabled, "This will cause a leak and performance issues, GameActions.PauseMenu.Disable() has not been called.");
        Debug.Assert(!m_CreatorPad.enabled, "This will cause a leak and performance issues, GameActions.CreatorPad.Disable() has not been called.");
        Debug.Assert(!m_MainMenu.enabled, "This will cause a leak and performance issues, GameActions.MainMenu.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InGame
    private readonly InputActionMap m_InGame;
    private List<IInGameActions> m_InGameActionsCallbackInterfaces = new List<IInGameActions>();
    private readonly InputAction m_InGame_Select;
    private readonly InputAction m_InGame_AdditionalSelect;
    private readonly InputAction m_InGame_SelectAll;
    private readonly InputAction m_InGame_Move;
    private readonly InputAction m_InGame_Action;
    private readonly InputAction m_InGame_Give;
    private readonly InputAction m_InGame_ForceIdle;
    private readonly InputAction m_InGame_SaveGame;
    private readonly InputAction m_InGame_LoadGame;
    public struct InGameActions
    {
        private @GameActions m_Wrapper;
        public InGameActions(@GameActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_InGame_Select;
        public InputAction @AdditionalSelect => m_Wrapper.m_InGame_AdditionalSelect;
        public InputAction @SelectAll => m_Wrapper.m_InGame_SelectAll;
        public InputAction @Move => m_Wrapper.m_InGame_Move;
        public InputAction @Action => m_Wrapper.m_InGame_Action;
        public InputAction @Give => m_Wrapper.m_InGame_Give;
        public InputAction @ForceIdle => m_Wrapper.m_InGame_ForceIdle;
        public InputAction @SaveGame => m_Wrapper.m_InGame_SaveGame;
        public InputAction @LoadGame => m_Wrapper.m_InGame_LoadGame;
        public InputActionMap Get() { return m_Wrapper.m_InGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InGameActions set) { return set.Get(); }
        public void AddCallbacks(IInGameActions instance)
        {
            if (instance == null || m_Wrapper.m_InGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InGameActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @AdditionalSelect.started += instance.OnAdditionalSelect;
            @AdditionalSelect.performed += instance.OnAdditionalSelect;
            @AdditionalSelect.canceled += instance.OnAdditionalSelect;
            @SelectAll.started += instance.OnSelectAll;
            @SelectAll.performed += instance.OnSelectAll;
            @SelectAll.canceled += instance.OnSelectAll;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Action.started += instance.OnAction;
            @Action.performed += instance.OnAction;
            @Action.canceled += instance.OnAction;
            @Give.started += instance.OnGive;
            @Give.performed += instance.OnGive;
            @Give.canceled += instance.OnGive;
            @ForceIdle.started += instance.OnForceIdle;
            @ForceIdle.performed += instance.OnForceIdle;
            @ForceIdle.canceled += instance.OnForceIdle;
            @SaveGame.started += instance.OnSaveGame;
            @SaveGame.performed += instance.OnSaveGame;
            @SaveGame.canceled += instance.OnSaveGame;
            @LoadGame.started += instance.OnLoadGame;
            @LoadGame.performed += instance.OnLoadGame;
            @LoadGame.canceled += instance.OnLoadGame;
        }

        private void UnregisterCallbacks(IInGameActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @AdditionalSelect.started -= instance.OnAdditionalSelect;
            @AdditionalSelect.performed -= instance.OnAdditionalSelect;
            @AdditionalSelect.canceled -= instance.OnAdditionalSelect;
            @SelectAll.started -= instance.OnSelectAll;
            @SelectAll.performed -= instance.OnSelectAll;
            @SelectAll.canceled -= instance.OnSelectAll;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Action.started -= instance.OnAction;
            @Action.performed -= instance.OnAction;
            @Action.canceled -= instance.OnAction;
            @Give.started -= instance.OnGive;
            @Give.performed -= instance.OnGive;
            @Give.canceled -= instance.OnGive;
            @ForceIdle.started -= instance.OnForceIdle;
            @ForceIdle.performed -= instance.OnForceIdle;
            @ForceIdle.canceled -= instance.OnForceIdle;
            @SaveGame.started -= instance.OnSaveGame;
            @SaveGame.performed -= instance.OnSaveGame;
            @SaveGame.canceled -= instance.OnSaveGame;
            @LoadGame.started -= instance.OnLoadGame;
            @LoadGame.performed -= instance.OnLoadGame;
            @LoadGame.canceled -= instance.OnLoadGame;
        }

        public void RemoveCallbacks(IInGameActions instance)
        {
            if (m_Wrapper.m_InGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInGameActions instance)
        {
            foreach (var item in m_Wrapper.m_InGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InGameActions @InGame => new InGameActions(this);

    // GameManager
    private readonly InputActionMap m_GameManager;
    private List<IGameManagerActions> m_GameManagerActionsCallbackInterfaces = new List<IGameManagerActions>();
    private readonly InputAction m_GameManager_SwitchLocale;
    private readonly InputAction m_GameManager_ChangeGameSpeed;
    private readonly InputAction m_GameManager_FreezeGame;
    public struct GameManagerActions
    {
        private @GameActions m_Wrapper;
        public GameManagerActions(@GameActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchLocale => m_Wrapper.m_GameManager_SwitchLocale;
        public InputAction @ChangeGameSpeed => m_Wrapper.m_GameManager_ChangeGameSpeed;
        public InputAction @FreezeGame => m_Wrapper.m_GameManager_FreezeGame;
        public InputActionMap Get() { return m_Wrapper.m_GameManager; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameManagerActions set) { return set.Get(); }
        public void AddCallbacks(IGameManagerActions instance)
        {
            if (instance == null || m_Wrapper.m_GameManagerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameManagerActionsCallbackInterfaces.Add(instance);
            @SwitchLocale.started += instance.OnSwitchLocale;
            @SwitchLocale.performed += instance.OnSwitchLocale;
            @SwitchLocale.canceled += instance.OnSwitchLocale;
            @ChangeGameSpeed.started += instance.OnChangeGameSpeed;
            @ChangeGameSpeed.performed += instance.OnChangeGameSpeed;
            @ChangeGameSpeed.canceled += instance.OnChangeGameSpeed;
            @FreezeGame.started += instance.OnFreezeGame;
            @FreezeGame.performed += instance.OnFreezeGame;
            @FreezeGame.canceled += instance.OnFreezeGame;
        }

        private void UnregisterCallbacks(IGameManagerActions instance)
        {
            @SwitchLocale.started -= instance.OnSwitchLocale;
            @SwitchLocale.performed -= instance.OnSwitchLocale;
            @SwitchLocale.canceled -= instance.OnSwitchLocale;
            @ChangeGameSpeed.started -= instance.OnChangeGameSpeed;
            @ChangeGameSpeed.performed -= instance.OnChangeGameSpeed;
            @ChangeGameSpeed.canceled -= instance.OnChangeGameSpeed;
            @FreezeGame.started -= instance.OnFreezeGame;
            @FreezeGame.performed -= instance.OnFreezeGame;
            @FreezeGame.canceled -= instance.OnFreezeGame;
        }

        public void RemoveCallbacks(IGameManagerActions instance)
        {
            if (m_Wrapper.m_GameManagerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameManagerActions instance)
        {
            foreach (var item in m_Wrapper.m_GameManagerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameManagerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameManagerActions @GameManager => new GameManagerActions(this);

    // StatzMenu
    private readonly InputActionMap m_StatzMenu;
    private List<IStatzMenuActions> m_StatzMenuActionsCallbackInterfaces = new List<IStatzMenuActions>();
    private readonly InputAction m_StatzMenu_Escape;
    public struct StatzMenuActions
    {
        private @GameActions m_Wrapper;
        public StatzMenuActions(@GameActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Escape => m_Wrapper.m_StatzMenu_Escape;
        public InputActionMap Get() { return m_Wrapper.m_StatzMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StatzMenuActions set) { return set.Get(); }
        public void AddCallbacks(IStatzMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_StatzMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StatzMenuActionsCallbackInterfaces.Add(instance);
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
        }

        private void UnregisterCallbacks(IStatzMenuActions instance)
        {
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
        }

        public void RemoveCallbacks(IStatzMenuActions instance)
        {
            if (m_Wrapper.m_StatzMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStatzMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_StatzMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StatzMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StatzMenuActions @StatzMenu => new StatzMenuActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_ZoomIn;
    private readonly InputAction m_Camera_ZoomOut;
    private readonly InputAction m_Camera_Move;
    private readonly InputAction m_Camera_ScrollZoom;
    public struct CameraActions
    {
        private @GameActions m_Wrapper;
        public CameraActions(@GameActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ZoomIn => m_Wrapper.m_Camera_ZoomIn;
        public InputAction @ZoomOut => m_Wrapper.m_Camera_ZoomOut;
        public InputAction @Move => m_Wrapper.m_Camera_Move;
        public InputAction @ScrollZoom => m_Wrapper.m_Camera_ScrollZoom;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @ZoomIn.started += instance.OnZoomIn;
            @ZoomIn.performed += instance.OnZoomIn;
            @ZoomIn.canceled += instance.OnZoomIn;
            @ZoomOut.started += instance.OnZoomOut;
            @ZoomOut.performed += instance.OnZoomOut;
            @ZoomOut.canceled += instance.OnZoomOut;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @ScrollZoom.started += instance.OnScrollZoom;
            @ScrollZoom.performed += instance.OnScrollZoom;
            @ScrollZoom.canceled += instance.OnScrollZoom;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @ZoomIn.started -= instance.OnZoomIn;
            @ZoomIn.performed -= instance.OnZoomIn;
            @ZoomIn.canceled -= instance.OnZoomIn;
            @ZoomOut.started -= instance.OnZoomOut;
            @ZoomOut.performed -= instance.OnZoomOut;
            @ZoomOut.canceled -= instance.OnZoomOut;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @ScrollZoom.started -= instance.OnScrollZoom;
            @ScrollZoom.performed -= instance.OnScrollZoom;
            @ScrollZoom.canceled -= instance.OnScrollZoom;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // ContinueInput
    private readonly InputActionMap m_ContinueInput;
    private List<IContinueInputActions> m_ContinueInputActionsCallbackInterfaces = new List<IContinueInputActions>();
    private readonly InputAction m_ContinueInput_ContinueToLevel;
    public struct ContinueInputActions
    {
        private @GameActions m_Wrapper;
        public ContinueInputActions(@GameActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ContinueToLevel => m_Wrapper.m_ContinueInput_ContinueToLevel;
        public InputActionMap Get() { return m_Wrapper.m_ContinueInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ContinueInputActions set) { return set.Get(); }
        public void AddCallbacks(IContinueInputActions instance)
        {
            if (instance == null || m_Wrapper.m_ContinueInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ContinueInputActionsCallbackInterfaces.Add(instance);
            @ContinueToLevel.started += instance.OnContinueToLevel;
            @ContinueToLevel.performed += instance.OnContinueToLevel;
            @ContinueToLevel.canceled += instance.OnContinueToLevel;
        }

        private void UnregisterCallbacks(IContinueInputActions instance)
        {
            @ContinueToLevel.started -= instance.OnContinueToLevel;
            @ContinueToLevel.performed -= instance.OnContinueToLevel;
            @ContinueToLevel.canceled -= instance.OnContinueToLevel;
        }

        public void RemoveCallbacks(IContinueInputActions instance)
        {
            if (m_Wrapper.m_ContinueInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IContinueInputActions instance)
        {
            foreach (var item in m_Wrapper.m_ContinueInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ContinueInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ContinueInputActions @ContinueInput => new ContinueInputActions(this);

    // PauseMenu
    private readonly InputActionMap m_PauseMenu;
    private List<IPauseMenuActions> m_PauseMenuActionsCallbackInterfaces = new List<IPauseMenuActions>();
    private readonly InputAction m_PauseMenu_Escape;
    public struct PauseMenuActions
    {
        private @GameActions m_Wrapper;
        public PauseMenuActions(@GameActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Escape => m_Wrapper.m_PauseMenu_Escape;
        public InputActionMap Get() { return m_Wrapper.m_PauseMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseMenuActions set) { return set.Get(); }
        public void AddCallbacks(IPauseMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Add(instance);
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
        }

        private void UnregisterCallbacks(IPauseMenuActions instance)
        {
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
        }

        public void RemoveCallbacks(IPauseMenuActions instance)
        {
            if (m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPauseMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_PauseMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PauseMenuActions @PauseMenu => new PauseMenuActions(this);

    // CreatorPad
    private readonly InputActionMap m_CreatorPad;
    private List<ICreatorPadActions> m_CreatorPadActionsCallbackInterfaces = new List<ICreatorPadActions>();
    private readonly InputAction m_CreatorPad_TryPlaceGrunt;
    public struct CreatorPadActions
    {
        private @GameActions m_Wrapper;
        public CreatorPadActions(@GameActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TryPlaceGrunt => m_Wrapper.m_CreatorPad_TryPlaceGrunt;
        public InputActionMap Get() { return m_Wrapper.m_CreatorPad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CreatorPadActions set) { return set.Get(); }
        public void AddCallbacks(ICreatorPadActions instance)
        {
            if (instance == null || m_Wrapper.m_CreatorPadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CreatorPadActionsCallbackInterfaces.Add(instance);
            @TryPlaceGrunt.started += instance.OnTryPlaceGrunt;
            @TryPlaceGrunt.performed += instance.OnTryPlaceGrunt;
            @TryPlaceGrunt.canceled += instance.OnTryPlaceGrunt;
        }

        private void UnregisterCallbacks(ICreatorPadActions instance)
        {
            @TryPlaceGrunt.started -= instance.OnTryPlaceGrunt;
            @TryPlaceGrunt.performed -= instance.OnTryPlaceGrunt;
            @TryPlaceGrunt.canceled -= instance.OnTryPlaceGrunt;
        }

        public void RemoveCallbacks(ICreatorPadActions instance)
        {
            if (m_Wrapper.m_CreatorPadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICreatorPadActions instance)
        {
            foreach (var item in m_Wrapper.m_CreatorPadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CreatorPadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CreatorPadActions @CreatorPad => new CreatorPadActions(this);

    // MainMenu
    private readonly InputActionMap m_MainMenu;
    private List<IMainMenuActions> m_MainMenuActionsCallbackInterfaces = new List<IMainMenuActions>();
    private readonly InputAction m_MainMenu_Cancel;
    private readonly InputAction m_MainMenu_Submit;
    private readonly InputAction m_MainMenu_Navigate;
    private readonly InputAction m_MainMenu_MoveMouse;
    public struct MainMenuActions
    {
        private @GameActions m_Wrapper;
        public MainMenuActions(@GameActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Cancel => m_Wrapper.m_MainMenu_Cancel;
        public InputAction @Submit => m_Wrapper.m_MainMenu_Submit;
        public InputAction @Navigate => m_Wrapper.m_MainMenu_Navigate;
        public InputAction @MoveMouse => m_Wrapper.m_MainMenu_MoveMouse;
        public InputActionMap Get() { return m_Wrapper.m_MainMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMenuActions set) { return set.Get(); }
        public void AddCallbacks(IMainMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MainMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainMenuActionsCallbackInterfaces.Add(instance);
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
            @Navigate.started += instance.OnNavigate;
            @Navigate.performed += instance.OnNavigate;
            @Navigate.canceled += instance.OnNavigate;
            @MoveMouse.started += instance.OnMoveMouse;
            @MoveMouse.performed += instance.OnMoveMouse;
            @MoveMouse.canceled += instance.OnMoveMouse;
        }

        private void UnregisterCallbacks(IMainMenuActions instance)
        {
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
            @Navigate.started -= instance.OnNavigate;
            @Navigate.performed -= instance.OnNavigate;
            @Navigate.canceled -= instance.OnNavigate;
            @MoveMouse.started -= instance.OnMoveMouse;
            @MoveMouse.performed -= instance.OnMoveMouse;
            @MoveMouse.canceled -= instance.OnMoveMouse;
        }

        public void RemoveCallbacks(IMainMenuActions instance)
        {
            if (m_Wrapper.m_MainMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MainMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainMenuActions @MainMenu => new MainMenuActions(this);
    public interface IInGameActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnAdditionalSelect(InputAction.CallbackContext context);
        void OnSelectAll(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
        void OnGive(InputAction.CallbackContext context);
        void OnForceIdle(InputAction.CallbackContext context);
        void OnSaveGame(InputAction.CallbackContext context);
        void OnLoadGame(InputAction.CallbackContext context);
    }
    public interface IGameManagerActions
    {
        void OnSwitchLocale(InputAction.CallbackContext context);
        void OnChangeGameSpeed(InputAction.CallbackContext context);
        void OnFreezeGame(InputAction.CallbackContext context);
    }
    public interface IStatzMenuActions
    {
        void OnEscape(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnZoomIn(InputAction.CallbackContext context);
        void OnZoomOut(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnScrollZoom(InputAction.CallbackContext context);
    }
    public interface IContinueInputActions
    {
        void OnContinueToLevel(InputAction.CallbackContext context);
    }
    public interface IPauseMenuActions
    {
        void OnEscape(InputAction.CallbackContext context);
    }
    public interface ICreatorPadActions
    {
        void OnTryPlaceGrunt(InputAction.CallbackContext context);
    }
    public interface IMainMenuActions
    {
        void OnCancel(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
        void OnNavigate(InputAction.CallbackContext context);
        void OnMoveMouse(InputAction.CallbackContext context);
    }
}
